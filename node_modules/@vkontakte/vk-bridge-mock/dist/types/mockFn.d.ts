import { RequestIdProp, VKBridgeSubscribeHandler, VKBridgeSend, VKBridgeResultEvent, AnyReceiveOnlyMethodName } from '@vkontakte/vk-bridge';
export declare const receiveOnlyMethods: AnyReceiveOnlyMethodName[];
export declare const broadcastData: (event: import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppInitResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAddToCommunityResult", {
    group_id: number;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAddToHomeScreenResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAddToHomeScreenInfoResult", {
    is_feature_supported: boolean;
    is_added_to_home_screen: boolean;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAllowMessagesFromGroupResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAllowNotificationsResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"OKWebAppCallAPIMethodResult", {
    response: any;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppCallAPIMethodResult", {
    response: any;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppCopyTextResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppDownloadFileResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAccessTokenReceived", {
    access_token: string;
    scope: string;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppCloseResult", {
    payload: any;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppOpenAppResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppDenyNotificationsResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppFlashGetInfoResult", {
    is_available: boolean;
    level: number;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppFlashSetLevelResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetClientVersionResult", {
    platform: string;
    version: string;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetEmailResult", {
    email: string;
    sign: string;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetFriendsResult", {
    users: import("@vkontakte/vk-bridge").UserGetFriendsFriend[];
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetGeodataResult", ({
    available: 0;
} & RequestIdProp) | ({
    available: 1;
    lat: number;
    long: number;
    accuracy: number;
} & RequestIdProp)> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetPersonalCardResult", import("@vkontakte/vk-bridge").PersonalCardData & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetPhoneNumberResult", {
    phone_number: string;
    sign: string;
    is_verified: boolean;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetUserInfoResult", import("@vkontakte/vk-bridge").UserInfo & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppJoinGroupResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppLeaveGroupResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAddToMenuResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppOpenCodeReaderResult", import("@vkontakte/vk-bridge").CodeReaderOutput & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppOpenQRResult", import("@vkontakte/vk-bridge").CodeReaderOutput & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppOpenContactsResult", import("@vkontakte/vk-bridge").SelectedContact & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppOpenPayFormResult", (import("@vkontakte/vk-bridge").TransactionResult & RequestIdProp) | ({
    result: import("@vkontakte/vk-bridge").TransactionResult;
} & RequestIdProp)> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppResizeWindowResult", {
    width: number;
    height: number;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppScrollResult", {
    top: number;
    height: number;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppSendToClientResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppSetLocationResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppSetViewSettingsResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShareResult", ({
    type: "message";
    users: import("@vkontakte/vk-bridge").ShareUserInfo[];
} & RequestIdProp) | ({
    type: "post";
    post_id: string;
} & RequestIdProp) | ({
    type: "story";
    story_id: string;
} & RequestIdProp) | ({
    type: "link" | "qr" | "other";
} & RequestIdProp)> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowCommunityWidgetPreviewBoxResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowImagesResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowInviteBoxResult", {
    success: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowLeaderBoardBoxResult", {
    success: boolean;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowMessageBoxResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowOrderBoxResult", {
    status: import("@vkontakte/vk-bridge").OrderBoxShowingStatus;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowRequestBoxResult", import("@vkontakte/vk-bridge").RequestResult & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowWallPostBoxResult", {
    post_id: string | number;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppOpenWallPostResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppStorageGetResult", {
    keys: {
        key: string;
        value: string;
    }[];
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppStorageGetKeysResult", {
    keys: string[];
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppStorageSetResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppTapticImpactOccurredResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppTapticNotificationOccurredResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppTapticSelectionChangedResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAddToFavoritesResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppSendPayloadResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetCommunityTokenResult", {
    access_token: string;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAudioPauseResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAudioPaused", {
    position: number;
    type: string;
    id: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAudioStopped", {}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAudioTrackChanged", {
    type: string;
    id: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAudioUnpaused", {
    type: string;
    id: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppInitAds", {
    init: "true" | "false";
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppLoadAds", {
    load: "true" | "false";
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppUpdateConfig", import("@vkontakte/vk-bridge").UpdateConfigData> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppUpdateInsets", {
    insets: import("@vkontakte/vk-bridge").Insets;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppViewHide", {}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppViewRestore", {}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppDisableSwipeBackResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppEnableSwipeBackResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppSetSwipeSettingsResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppShowStoryBoxResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAccelerometerStartResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAccelerometerStopResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGyroscopeStartResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGyroscopeStopResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppAccelerometerChanged", {
    x: string;
    y: string;
    z: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGyroscopeChanged", {
    x: string;
    y: string;
    z: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppDeviceMotionStartResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppDeviceMotionChanged", {
    alpha: string;
    beta: string;
    gamma: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppDeviceMotionStopResult", {
    result: true;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppLocationChanged", {
    location: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppSubscribeStoryAppResult", {
    access_key: string;
} & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppGetGroupInfoResult", import("@vkontakte/vk-bridge").GroupInfo & RequestIdProp> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppLibverifyOnConfirmed", {
    validate_session: string;
    validate_token: string;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppLibverifyOnFailed", {
    code: import("@vkontakte/vk-bridge").VKWebAppLibverifyOnFailedCode;
}> | import("@vkontakte/vk-bridge").VKBridgeEventBase<"VKWebAppRetargetingPixelResult", {
    result: true;
} & RequestIdProp>) => void;
export declare const prepareResponse: <K extends "VKWebAppInit" | "VKWebAppAddToCommunity" | "VKWebAppAddToHomeScreen" | "VKWebAppAddToHomeScreenInfo" | "VKWebAppAllowMessagesFromGroup" | "VKWebAppAllowNotifications" | "OKWebAppCallAPIMethod" | "VKWebAppCallAPIMethod" | "VKWebAppCopyText" | "VKWebAppDownloadFile" | "VKWebAppGetAuthToken" | "VKWebAppClose" | "VKWebAppOpenApp" | "VKWebAppDenyNotifications" | "VKWebAppFlashGetInfo" | "VKWebAppFlashSetLevel" | "VKWebAppGetClientVersion" | "VKWebAppGetEmail" | "VKWebAppGetFriends" | "VKWebAppGetGeodata" | "VKWebAppGetPersonalCard" | "VKWebAppGetPhoneNumber" | "VKWebAppGetUserInfo" | "VKWebAppJoinGroup" | "VKWebAppLeaveGroup" | "VKWebAppAddToMenu" | "VKWebAppOpenCodeReader" | "VKWebAppOpenQR" | "VKWebAppOpenContacts" | "VKWebAppOpenPayForm" | "VKWebAppResizeWindow" | "VKWebAppScroll" | "VKWebAppSendToClient" | "VKWebAppSetLocation" | "VKWebAppSetViewSettings" | "VKWebAppShare" | "VKWebAppShowCommunityWidgetPreviewBox" | "VKWebAppShowImages" | "VKWebAppShowInviteBox" | "VKWebAppShowLeaderBoardBox" | "VKWebAppShowMessageBox" | "VKWebAppShowOrderBox" | "VKWebAppShowRequestBox" | "VKWebAppShowWallPostBox" | "VKWebAppOpenWallPost" | "VKWebAppStorageGet" | "VKWebAppStorageGetKeys" | "VKWebAppStorageSet" | "VKWebAppTapticImpactOccurred" | "VKWebAppTapticNotificationOccurred" | "VKWebAppTapticSelectionChanged" | "VKWebAppAddToFavorites" | "VKWebAppSendPayload" | "VKWebAppGetCommunityToken" | "VKWebAppAudioPause" | "VKWebAppAudioPaused" | "VKWebAppAudioStopped" | "VKWebAppAudioTrackChanged" | "VKWebAppAudioUnpaused" | "VKWebAppInitAds" | "VKWebAppLoadAds" | "VKWebAppUpdateConfig" | "VKWebAppUpdateInsets" | "VKWebAppViewHide" | "VKWebAppViewRestore" | "VKWebAppDisableSwipeBack" | "VKWebAppEnableSwipeBack" | "VKWebAppSetSwipeSettings" | "VKWebAppShowStoryBox" | "VKWebAppAccelerometerStart" | "VKWebAppAccelerometerStop" | "VKWebAppGyroscopeStart" | "VKWebAppGyroscopeStop" | "VKWebAppAccelerometerChanged" | "VKWebAppGyroscopeChanged" | "VKWebAppDeviceMotionStart" | "VKWebAppDeviceMotionChanged" | "VKWebAppDeviceMotionStop" | "VKWebAppLocationChanged" | "VKWebAppSubscribeStoryApp" | "VKWebAppGetGroupInfo" | "VKWebAppLibverifyOnConfirmed" | "VKWebAppLibverifyOnFailed" | "VKWebAppRetargetingPixel">(method: K, props?: (K extends "VKWebAppInit" | "VKWebAppAddToCommunity" | "VKWebAppAddToHomeScreen" | "VKWebAppAddToHomeScreenInfo" | "VKWebAppAllowMessagesFromGroup" | "VKWebAppAllowNotifications" | "OKWebAppCallAPIMethod" | "VKWebAppCallAPIMethod" | "VKWebAppCopyText" | "VKWebAppDownloadFile" | "VKWebAppGetAuthToken" | "VKWebAppClose" | "VKWebAppOpenApp" | "VKWebAppDenyNotifications" | "VKWebAppFlashGetInfo" | "VKWebAppFlashSetLevel" | "VKWebAppGetClientVersion" | "VKWebAppGetEmail" | "VKWebAppGetFriends" | "VKWebAppGetGeodata" | "VKWebAppGetPersonalCard" | "VKWebAppGetPhoneNumber" | "VKWebAppGetUserInfo" | "VKWebAppJoinGroup" | "VKWebAppLeaveGroup" | "VKWebAppAddToMenu" | "VKWebAppOpenCodeReader" | "VKWebAppOpenQR" | "VKWebAppOpenContacts" | "VKWebAppOpenPayForm" | "VKWebAppResizeWindow" | "VKWebAppScroll" | "VKWebAppSendToClient" | "VKWebAppSetLocation" | "VKWebAppSetViewSettings" | "VKWebAppShare" | "VKWebAppShowCommunityWidgetPreviewBox" | "VKWebAppShowImages" | "VKWebAppShowInviteBox" | "VKWebAppShowLeaderBoardBox" | "VKWebAppShowMessageBox" | "VKWebAppShowOrderBox" | "VKWebAppShowRequestBox" | "VKWebAppShowWallPostBox" | "VKWebAppOpenWallPost" | "VKWebAppStorageGet" | "VKWebAppStorageGetKeys" | "VKWebAppStorageSet" | "VKWebAppTapticImpactOccurred" | "VKWebAppTapticNotificationOccurred" | "VKWebAppTapticSelectionChanged" | "VKWebAppAddToFavorites" | "VKWebAppSendPayload" | "VKWebAppGetCommunityToken" | "VKWebAppAudioPause" | "VKWebAppDisableSwipeBack" | "VKWebAppEnableSwipeBack" | "VKWebAppSetSwipeSettings" | "VKWebAppShowStoryBox" | "VKWebAppAccelerometerStart" | "VKWebAppAccelerometerStop" | "VKWebAppGyroscopeStart" | "VKWebAppGyroscopeStop" | "VKWebAppDeviceMotionStart" | "VKWebAppDeviceMotionStop" | "VKWebAppSubscribeStoryApp" | "VKWebAppGetGroupInfo" | "VKWebAppRetargetingPixel" | "VKWebAppLibverifyRequest" | "VKWebAppLibverifyCheck" ? import("@vkontakte/vk-bridge").RequestPropsMap[K] & RequestIdProp : RequestIdProp) | undefined) => VKBridgeResultEvent<K>;
export declare const isReceiveMockMethodExists: (methodName: string) => methodName is "VKWebAppInit" | "VKWebAppAddToCommunity" | "VKWebAppAddToHomeScreen" | "VKWebAppAddToHomeScreenInfo" | "VKWebAppAllowMessagesFromGroup" | "VKWebAppAllowNotifications" | "OKWebAppCallAPIMethod" | "VKWebAppCallAPIMethod" | "VKWebAppCopyText" | "VKWebAppDownloadFile" | "VKWebAppGetAuthToken" | "VKWebAppClose" | "VKWebAppOpenApp" | "VKWebAppDenyNotifications" | "VKWebAppFlashGetInfo" | "VKWebAppFlashSetLevel" | "VKWebAppGetClientVersion" | "VKWebAppGetEmail" | "VKWebAppGetFriends" | "VKWebAppGetGeodata" | "VKWebAppGetPersonalCard" | "VKWebAppGetPhoneNumber" | "VKWebAppGetUserInfo" | "VKWebAppJoinGroup" | "VKWebAppLeaveGroup" | "VKWebAppAddToMenu" | "VKWebAppOpenCodeReader" | "VKWebAppOpenQR" | "VKWebAppOpenContacts" | "VKWebAppOpenPayForm" | "VKWebAppResizeWindow" | "VKWebAppScroll" | "VKWebAppSendToClient" | "VKWebAppSetLocation" | "VKWebAppSetViewSettings" | "VKWebAppShare" | "VKWebAppShowCommunityWidgetPreviewBox" | "VKWebAppShowImages" | "VKWebAppShowInviteBox" | "VKWebAppShowLeaderBoardBox" | "VKWebAppShowMessageBox" | "VKWebAppShowOrderBox" | "VKWebAppShowRequestBox" | "VKWebAppShowWallPostBox" | "VKWebAppOpenWallPost" | "VKWebAppStorageGet" | "VKWebAppStorageGetKeys" | "VKWebAppStorageSet" | "VKWebAppTapticImpactOccurred" | "VKWebAppTapticNotificationOccurred" | "VKWebAppTapticSelectionChanged" | "VKWebAppAddToFavorites" | "VKWebAppSendPayload" | "VKWebAppGetCommunityToken" | "VKWebAppAudioPause" | "VKWebAppAudioPaused" | "VKWebAppAudioStopped" | "VKWebAppAudioTrackChanged" | "VKWebAppAudioUnpaused" | "VKWebAppInitAds" | "VKWebAppLoadAds" | "VKWebAppUpdateConfig" | "VKWebAppUpdateInsets" | "VKWebAppViewHide" | "VKWebAppViewRestore" | "VKWebAppDisableSwipeBack" | "VKWebAppEnableSwipeBack" | "VKWebAppSetSwipeSettings" | "VKWebAppShowStoryBox" | "VKWebAppAccelerometerStart" | "VKWebAppAccelerometerStop" | "VKWebAppGyroscopeStart" | "VKWebAppGyroscopeStop" | "VKWebAppAccelerometerChanged" | "VKWebAppGyroscopeChanged" | "VKWebAppDeviceMotionStart" | "VKWebAppDeviceMotionChanged" | "VKWebAppDeviceMotionStop" | "VKWebAppLocationChanged" | "VKWebAppSubscribeStoryApp" | "VKWebAppGetGroupInfo" | "VKWebAppLibverifyOnConfirmed" | "VKWebAppLibverifyOnFailed" | "VKWebAppRetargetingPixel";
export declare const send: VKBridgeSend;
export declare const subscribe: (fn: VKBridgeSubscribeHandler) => undefined;
export declare const unsubscribe: (fn: VKBridgeSubscribeHandler) => void;
export declare const callReceiveOnlyMethod: (methodName: "VKWebAppAudioPaused" | "VKWebAppAudioStopped" | "VKWebAppAudioTrackChanged" | "VKWebAppAudioUnpaused" | "VKWebAppInitAds" | "VKWebAppLoadAds" | "VKWebAppUpdateConfig" | "VKWebAppUpdateInsets" | "VKWebAppViewHide" | "VKWebAppViewRestore" | "VKWebAppAccelerometerChanged" | "VKWebAppGyroscopeChanged" | "VKWebAppDeviceMotionChanged" | "VKWebAppLocationChanged" | "VKWebAppLibverifyOnConfirmed" | "VKWebAppLibverifyOnFailed") => void;
